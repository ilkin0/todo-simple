trigger:
  - master

pool:
  vmImage: "ubuntu-16.04"

variables:
  - group: AWS-RESOURCES
  - name: DOCKER_REPOSITORY
    value: $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(DOCKER_REPOSITORY_NAME)

stages:
  - stage: BUILD
    displayName: BUILD
    jobs:
      - job: BUILD_JOB
        steps:
          - task: DockerInstaller@0
            displayName: "Install Docker 17.09.0-ce"
            enabled: true

          - task: Bash@3
            displayName: "RUN DB"
            inputs:
              filePath: ./scripts/run-app.sh
            enabled: true

#          - script: chmod +x ./gradlew
#            displayName: "GIVE WRITE ACCSESS TO GRADLE"

          - task: Gradle@2
            - script: chmod +x ./gradlew
            displayName: "BUILD APP"
            inputs:
              gradleWrapperFile: 'gradlew'
              jdkVersionOption: 1.11
            enabled: true

          - task: CopyFiles@2
            displayName: "Copy Files to: $(build.artifactstagingdirectory)"
            inputs:
              SourceFolder: "$(system.defaultworkingdirectory)"
              Contents: "**/*.war"
              TargetFolder: "$(build.artifactstagingdirectory)"
            enabled: true
            condition: succeededOrFailed()

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: drop"
            inputs:
              PathtoPublish: "$(build.artifactstagingdirectory)"
            enabled: true
            condition: succeededOrFailed()

      - job: BUILD_DOCKER
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              artifactName: 'drop'
              downloadPath: '$(system.defaultworkingdirectory)'

          - task: Docker@2
            displayName: "BUILD IMAGE"
            inputs:
              containerRegistry: AWS
              command: build
              arguments: "-t $(DOCKER_REPOSITORY):$(Build.BuildId) --build-arg url=$(db_url) --build-arg user=$(db_user)  --build-arg pass=$(db_pass) --build-arg port=$(tomcat_port)"
            enabled: true

#          - task: ECRPushImage@1
#            displayName: "PUSH IMAGE TO AWS"
#            inputs:
#              awsCredentials: 'AWS-IAM'
#              regionName: '$(AWS_REGION)'
#              imageSource: 'imageid'
#              sourceImageId: '$(Build.BuildId)'
#              repositoryName: '$(DOCKER_REPOSITORY_NAME)'
#            enabled: true
          - task: ECRPushImage@1
            displayName: "PUSH IMAGE TO AWS"
            inputs:
              awsCredentials: 'AWS-IAM'
              regionName: '$(AWS_REGION)'
              imageSource: 'imagename'
              sourceImageName: '$(DOCKER_REPOSITORY)'
              sourceImageTag: '$(Build.BuildId)'
              repositoryName: '$(DOCKER_REPOSITORY_NAME)'
            enabled: true
